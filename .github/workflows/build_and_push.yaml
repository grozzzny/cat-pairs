name: CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  build-and-push:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: cr.yandex
          username: oauth
          password: ${{ secrets.YA_TOKEN_REGISTRY }}

      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.client
          push: true
          tags: cr.yandex/${{ vars.ID_REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/client:${{ github.ref_name }}
          build-args: |
            CLIENT_HOST=${{ vars.CLIENT_HOST }}

      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.server
          push: true
          tags: cr.yandex/${{ vars.ID_REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}/server:${{ github.ref_name }}

  deploy:
    needs: build-and-push
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Copy docker-compose-prod.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: docker-compose-prod.yml
          target: /home/admin

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          CLIENT_HOST: ${{ vars.CLIENT_HOST }}
          SERVER_HOST: ${{ vars.SERVER_HOST }}
          SERVER_PORT: ${{ vars.SERVER_PORT }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          PGADMIN_EMAIL: ${{ vars.PGADMIN_EMAIL }}
          PGADMIN_PASSWORD: ${{ secrets.PGADMIN_PASSWORD }}
          TAG: ${{ github.ref_name }}
          ID_REGISTRY: ${{ vars.ID_REGISTRY }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: CLIENT_HOST,SERVER_HOST,SERVER_PORT,POSTGRES_HOST,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,POSTGRES_PORT,PGADMIN_EMAIL,PGADMIN_PASSWORD,TAG,ID_REGISTRY
          script: |
            echo "oauth" | docker secret create registry_user -
            echo "${{ secrets.YA_TOKEN_REGISTRY }}" | docker secret create registry_password -
            docker compose -f /home/admin/docker-compose-prod.yml pull
            docker image prune -f
            docker compose -f /home/admin/docker-compose-prod.yml -p ${{ github.event.repository.name }} up -d
